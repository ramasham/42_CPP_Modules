#ifndef BASE_HPP
#define BASE_HPP

//dynamic_cast is a cast operator that converts data
//from one type to another type at runtime

//downcasting -> (dynamic cast)
//You have a pointer or reference to the base class,
//but it may actually point to an object of a derived class,
//and you want to access the derived part safely.

//o work with dynamic_cast,
//there must be one virtual function in the base class.

// To use dynamic_cast safely on a pointer or reference to
//a base class and cast it to a derived class, the base class must be polymorphic.
// (A class is polymorphic if it has at least one virtual function.)

// Because dynamic_cast uses runtime type information (RTTI) to determine the actual (dynamic)
//type of the object pointed to by a base class pointer or reference.
//RTTI is only generated by the compiler if the base class has at least one virtual function.
//why ??


class Base {
    public:
        virtual ~Base() {}
};

#endif